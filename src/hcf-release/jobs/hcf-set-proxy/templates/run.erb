#!/bin/bash

set -o errexit -o nounset

# put the cli on the path
export PATH=/var/vcap/packages/cli/bin:/var/vcap/packages/service-registration-utils:${PATH}

<%
require 'shellwords'
env = {}
if_p("hcf_set_proxy.staging_http_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["http_proxy"] = val
   env["staging"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_https_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["https_proxy"] = val
   env["staging"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_no_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["no_proxy"] = val
   env["staging"]["no_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_http_proxy") do |val|
   env["running"] ||= {}
   env["running"]["http_proxy"] = val
   env["running"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_https_proxy") do |val|
   env["running"] ||= {}
   env["running"]["https_proxy"] = val
   env["running"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_no_proxy") do |val|
   env["running"] ||= {}
   env["running"]["no_proxy"] = val
   env["running"]["no_proxy".upcase] = val
end
%>

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

CF_SKIP="<%= properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : '' %>"
CURL_SKIP="<%= properties.ssl.skip_cert_verify ? '--insecure' : '' %>"

UAA_ENDPOINT="<%= p('hcf.uaa.internal-url') %>"
API_ENDPOINT="<%= p("cc.srv_api_uri") %>"

echo "Waiting for CC... $CF_SKIP $API_ENDPOINT"
retry 240 30s cf api $CF_SKIP "$API_ENDPOINT"

echo "Waiting for UAA... $CURL_SKIP $UAA_ENDPOINT"
retry 240 30s curl --fail --silent --header 'Accept: application/json' $UAA_ENDPOINT/info

insert_cf_client_auth_token.rb "$UAA_ENDPOINT" hcf_auto_config:<%= p("uaa.clients.hcf_auto_config.secret").shellescape %> ${CURL_SKIP}

<%
%W{staging running}.each do |runtime|
  if env[runtime] && !env[runtime].empty? %>
cf set-<%= runtime %>-environment-variable-group <%= env[runtime].to_json.shellescape %>
<%end
end %>

echo "Remove temporary users"
remove_temporary_users.rb "${API_ENDPOINT}" "${CURL_SKIP}"

echo "Setting of external proxies complete."
