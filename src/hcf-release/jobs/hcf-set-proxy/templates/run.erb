#!/bin/bash

set -o errexit -o nounset

# put UAAC on the path
export PATH="${PATH}:/var/vcap/packages/ruby-2.3/bin:/var/vcap/packages/cf-uaac/bin"
export GEM_HOME=/var/vcap/packages/cf-uaac/vendor/bundle/ruby/2.3.0/

<%
require 'shellwords'
env = {}
if_p("hcf_set_proxy.staging_http_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["http_proxy"] = val
   env["staging"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_https_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["https_proxy"] = val
   env["staging"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_no_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["no_proxy"] = val
   env["staging"]["no_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_http_proxy") do |val|
   env["running"] ||= {}
   env["running"]["http_proxy"] = val
   env["running"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_https_proxy") do |val|
   env["running"] ||= {}
   env["running"]["https_proxy"] = val
   env["running"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_no_proxy") do |val|
   env["running"] ||= {}
   env["running"]["no_proxy"] = val
   env["running"]["no_proxy".upcase] = val
end
%>

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

# We need to use client_credentials to log in, and not as a user (so that we can
# reliably run as a post-deployment job after the user has changed their
# password); therefore, we can't use the `cf` command line client.

UAA_ENDPOINT="<%= p('hcf.uaa.internal-url') %>"
UAA_ENDPOINT="${UAA_ENDPOINT%/}" # UAA doesn't like extra slashes, at all.
API_ENDPOINT="api-int.${HCP_SERVICE_DOMAIN_SUFFIX}:9022"

<%
curl_ssl = properties.ssl.skip_cert_verify ? '--insecure' : ''
uaac_ssl = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
%>

printf "Waiting for CC... %s %s\n" '<%= curl_ssl %>' "${API_ENDPOINT}"
retry 240 30s curl --fail --silent <%= curl_ssl %> -o /dev/null http://${API_ENDPOINT}/v2/info

printf "Waiting for UAA... %s %s\n" '<%= curl_ssl %>' "${UAA_ENDPOINT}"
retry 240 30s curl --fail --silent <%= curl_ssl %> -o /dev/null --header 'Accept: application/json' '<%= p("hcf.uaa.internal-url") %>/info'

printf 'Logging in to %s\n' '<%= p("hcf.uaa.internal-url") %>'
uaac target <%= uaac_ssl %> <%= p("hcf.uaa.internal-url") %>
uaac token client get hcf_auto_config --secret '<%= p("uaa.clients.hcf_auto_config.secret") %>'
token="$(uaac context | awk '/access_token:/ { print $2 }')"

function cf_curl() {
    local path="$1"
    shift
    curl --fail --silent --header 'Accept: application/json' --header "Authorization: bearer ${token}" "http://${API_ENDPOINT}${path}" "$@"
}

<%
    %W{staging running}.each do |runtime|
        next unless env[runtime]
        %>
            old_value="$(cf_curl "/v2/config/environment_variable_groups/<%= runtime %>" | tr -d '[:space:]')"
            if test "${old_value}" != "{}" ; then
                printf "Skipping setting %s environment variable groups, unexpected value:\n%s\n" '<%= runtime %>' "${old_value}"
            else
                cf_curl "/v2/config/environment_variable_groups/<%= runtime %>" -X PUT -d@- <<< <%= env[runtime].to_json.shellescape %>
            fi
        <%
    end
%>

echo "Setting of external proxies complete."
