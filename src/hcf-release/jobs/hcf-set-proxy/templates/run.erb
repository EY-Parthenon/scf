#!/bin/bash

set -e

export PATH=/var/vcap/packages/cli/bin:${PATH} # put the cli on the path
<%
require 'shellwords'
env = {}
if_p("hcf_set_proxy.staging_http_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["http_proxy"] = val
   env["staging"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_https_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["https_proxy"] = val
   env["staging"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.staging_no_proxy") do |val|
   env["staging"] ||= {}
   env["staging"]["no_proxy"] = val
   env["staging"]["no_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_http_proxy") do |val|
   env["running"] ||= {}
   env["running"]["http_proxy"] = val
   env["running"]["http_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_https_proxy") do |val|
   env["running"] ||= {}
   env["running"]["https_proxy"] = val
   env["running"]["https_proxy".upcase] = val
end
if_p("hcf_set_proxy.running_no_proxy") do |val|
   env["running"] ||= {}
   env["running"]["no_proxy"] = val
   env["running"]["no_proxy".upcase] = val
end
%>

<%
if_p("hcf_set_proxy.api_proxy") do |val|
  %>
    export http_proxy=<%= val %>
    export https_proxy=<%= val %>
  <%
end
%>

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

function edit_config () {
    key="$1"
    value="$2"
    pattern="s|\"$key\":[ 	]*\".*\",$|\"$key\": \"$value\",|"
    sed < $HOME/.cf/config.json > $$ -e "$pattern"
    mv $$ $HOME/.cf/config.json
}

function retarget_auth () {
    # Manipulate the authentication endpoints saved by the `cf api`
    # command.  This fakes `cf auth` out, forcing it to use the
    # internal auth host. Note the special port for https.

    UAA="https://uaa.${HCP_SERVICE_DOMAIN_SUFFIX}:8443"
    edit_config AuthorizationEndpoint "$UAA"
    edit_config UaaEndpoint           "$UAA"
}

<%
skip_ssl_validation = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
username, password = properties.uaa.scim.users.detect{|u|u.include? 'cloud_controller.admin'}.split('|')[0..1]
%>

retry 240 30s cf api <%= skip_ssl_validation %> api.${HCP_SERVICE_DOMAIN_SUFFIX}:9022

retarget_auth

retry 240 30s cf auth <%= username.shellescape %> <%= password.shellescape %>

<% 
%W{staging running}.each do |runtime| 
  if env[runtime] %>
cf set-<%= runtime %>-environment-variable-group <%= env[runtime].to_json.shellescape %>
<%end 
end %>
