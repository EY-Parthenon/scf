#!/bin/bash

# This script creates the initial user in HCP in the UAA zone if we are using
# one. This does not apply when we're using the default UAA zone (in which case
# we do it via properties.uaa.scim.users)
# We should only be in the default zone in Vagrant / AWS.  HCF deployed on HCP
# should always end up in the instance-specific zone.

set -o errexit -o nounset

# Report progress to the user; use as printf
status() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;32m" "$@" "\033[0m"
}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

if test -z "${HCP_INSTANCE_ID:-}" ; then
    # Not running in HCP; we don't need to create users
    status "Skipping user creation, not running on HCP"
    exit 0
fi

export PATH="${PATH}:/var/vcap/packages/ruby-2.3/bin:/var/vcap/packages/cf-uaac/bin"
export GEM_HOME=/var/vcap/packages/cf-uaac/vendor/bundle/ruby/2.3.0/

<%
curl_ssl = properties.ssl.skip_cert_verify ? '--insecure' : ''
uaac_ssl = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
%>

status "Waiting for UAA to be availabile..."
retry 240 30s curl --silent --fail '<%= curl_ssl %>' --header 'Accept: application/json' '<%= p("uaa.url") %>/info'

status "Logging in to %s" '<%= p("uaa.url") %>'
uaac target <%= uaac_ssl %> <%= p("uaa.url") %>
uaac token client get uaa_create_first_user --secret '<%= p("uaa.clients.uaa_create_first_user.secret") %>'

<% properties.uaa.scim.users.each do |user_info| %>

    <% username, password, authorities = user_info.split('|') %>
    <% authorities = authorities.split(',') %>

    if uaac user get '<%= username %>' ; then
        status "User %s already exists" '<%= username %>'
    else
        status "Creating user %s" '<%= username %>'
        uaac user add '<%= username %>' --given_name '' --family_name '' --emails '<%= username %>' --password '<%= password %>'
    fi

    user_id=$(uaac user get '<%= username %>' | awk '/^  id:/ { print $2 }')

    <% authorities.each do |authority| %>
        status "Adding users to authority %s" '<%= authority %>'
        if ! uaac group get '<%= authority %>' 2>/dev/null >/dev/null ; then
            uaac group add '<%= authority %>'
        fi
        if uaac group get '<%= authority %>' | grep -q '  displayname: <%= username %>' ; then
            status "User %s already in %s" '<%= username %>' '<%= authority %>'
            continue
        fi
        if ! uaac group get '<%= authority %>' | grep -q "    value: ${user_id}" ; then
            uaac member add '<%= authority %>' '<%= username %>'
        fi
    <% end %>

<% end %>

status "UAA initialization successful"
# We need to leave the initial user around, so that this script can be re-run :/
