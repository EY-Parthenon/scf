#!/bin/bash

# This script creates the initial user in HCP in the UAA zone if we are using
# one. This does not apply when we're using the default UAA zone (in which case
# we do it via properties.uaa.scim.users)
# We should only be in the default zone in Vagrant / AWS.  HCF deployed on HCP
# should always end up in the instance-specific zone.

set -o errexit -o nounset

if test -z "${HCP_INSTANCE_ID:-}" ; then
    # Not running in HCP; we don't need to create users
    exit 0
fi

status() {
    local fmt="${1}"
    shift
    printf "\n%b${fmt}%b\n" "\033[0;32m" "$@" "\033[0m"
}

<%
skip_ssl_validation = properties.ssl.skip_cert_verify ? '--insecure' : ''
username, password = properties.uaa.scim.users.detect{|u|u.include? 'cloud_controller.admin'}.split('|').take(2)
%>

export PATH="${PATH}:/var/vcap/packages/jq/bin"

# Get an auth token
access_token="$(curl \
    <%= skip_ssl_validation %> \
    --silent \
    --user 'uaa_create_first_user:<%= p("uaa.clients.uaa_create_first_user.secret") %>' \
    '<%= p("uaa.url") %>/oauth/token?grant_type=client_credentials' \
    | jq -r .access_token)"

request() {
    curl \
        <%= skip_ssl_validation %> \
        --header 'Accept: application/json' \
        --header "Authorization: bearer ${access_token}" \
        --header 'Content-Type: application/json' \
        "$@"
}

# Create the user
status "Creating user %s" '<%= username %>'
request --data @- \
    '<%= p("uaa.url") %>/Users' <<-EOF
    {
        "userName": "<%= username %>",
        "password": "<%= password %>",
        "name": {
            "familyName": "",
            "givenName": ""
        },
        "emails": [{
            "value": "<%= username %>",
            "primary": true
        }],
        "verified": true
    }
EOF

# Get the user id
user_id="$(request '<%= p("uaa.url") %>/Users' \
    | jq -r ".resources[] | select(.userName == \"<%= username %>\") | .id")"
status "Created user %s with id %s" '<%= username %>' "${user_id}"

# Add the user to the relevant groups
groups="$(request '<%= p("uaa.url") %>/Groups' | jq -r "(.resources // []) | .[]")"
for group_name in $(echo "
        approvals.me
        cloud_controller.admin
        cloud_controller.read
        cloud_controller_service_permissions.read
        cloud_controller.write
        doppler.firehose
        notification_preferences.read
        notification_preferences.write
        oauth.approvals
        openid
        password.write
        profile
        roles
        routing.router_groups.read
        scim.me
        scim.read
        scim.write
        uaa.user
        user_attributes
    ") ; do
    group_id=$(printf %s "${groups}" \
               | jq -r "select(.displayName == \"${group_name}\") | .id")
    if test -z "${group_id}" ; then
        status "Creating missing group %s" "${group_name}"
        request '<%= p("uaa.url") %>/Groups' -d@- <<-EOF
        {
            "displayName": "${group_name}"
        }
EOF
        groups="$(request '<%= p("uaa.url") %>/Groups' | jq -r "(.resources // []) | .[]")"
        group_id=$(printf %s "${groups}" \
                   | jq -r "select(.displayName == \"${group_name}\") | .id")
    fi
    status "Adding user %s to group %s (id %s)" '<%= username %>' "${group_name}" "${group_id}"
    request "<%= p("uaa.url") %>/Groups/${group_id}/members" -d@- <<-EOF
    {
        "origin": "uaa",
        "type": "USER",
        "value": "${user_id}"
    }
EOF
done

# We need to leave the user around, so that this script can be re-run :/
