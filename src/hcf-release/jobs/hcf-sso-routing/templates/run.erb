#!/bin/bash

<% username, password = properties.uaa.scim.users.detect{|u|u.include? 'cloud_controller.admin'}.split('|')[0..1] %>

set -e

# put the cli on the path
export PATH=/var/vcap/packages/cli/bin:${PATH}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}

function edit_config () {
    key="$1"
    value="$2"
    pattern="s|\"$key\":[ 	]*\".*\",$|\"$key\": \"$value\",|"
    sed < $HOME/.cf/config.json > $$ -e "$pattern"
    mv $$ $HOME/.cf/config.json
}

function retarget_auth () {
    # Manipulate the authentication endpoints saved by the `cf api`
    # command.  This fakes `cf auth` out, forcing it to use the
    # internal auth host. Note the special port for https.

    edit_config AuthorizationEndpoint "$UAA_ENDPOINT"
    edit_config UaaEndpoint           "$UAA_ENDPOINT"
}

function select_action () {
    SERVICE="$1"

    # Check if the broker is known already or not. Depending on the
    # result we simply update the existing broker, or create a new one.

    action=create
    if cf service-brokers 2>/dev/null | grep --quiet "$SERVICE" ; then
	action=update
    fi
    echo $action
}

function register_service () {
    SERVICE="$1"
    USER="$2"
    PASS="$3"
    ENDPOINT="$4"

    cf $(select_action "$SERVICE")-service-broker "$SERVICE" "$USER" "$PASS" "$ENDPOINT"

    # Make the broker available to all orgs and their spaces
    cf enable-service-access "$SERVICE"
}

SKIP="<%= properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : '' %>"
USER="<%= username.shellescape %>"
PASS="<%= password.shellescape %>"
SSO_PORT="<%= p("hcf_sso.port") %>"
SSO_USER="<%= p("hcf_sso.username") %>"
SSO_PASS="<%= p("hcf_sso.password") %>"

UAA_ENDPOINT="<%= p('hcf.uaa.internal-url') %>"
SSO_ENDPOINT="https://${HCF_SSO_HOST}.${HCP_SERVICE_DOMAIN_SUFFIX}:${SSO_PORT}"
API_ENDPOINT="${API_HOST}.${HCP_SERVICE_DOMAIN_SUFFIX}:9022"

echo "Waiting for CC... $SKIP $API_ENDPOINT"
retry 240 30s cf api $SKIP "$API_ENDPOINT"

retarget_auth

echo "Waiting for UAA..."
retry 240 30s cf auth "$USER" "$PASS"

echo "Waiting for SSO Routing service broker..."
retry 240 30s curl --fail --silent --insecure "$SSO_ENDPOINT/ping" >/dev/null 2>&1

echo "Registering SSO Routing service broker..."

register_service sso-routing "$SSO_USER" "$SSO_PASS" "$SSO_ENDPOINT"

echo "Registration of SSO Routing complete."
