#!/bin/bash

set -e

# put the cli on the path
export PATH=/var/vcap/packages/cli/bin:${PATH}

# helper function to retry a command several times, with a delay between trials
# usage: retry <max-tries> <delay> <command>...
function retry () {
    max=${1}
    delay=${2}
    i=0
    shift 2

    while test ${i} -lt ${max} ; do
        if "$@" ; then
            break
        fi
        sleep "${delay}"
        i="$(expr ${i} + 1)"
    done
}


#TODO: check for ssl validation property
<%
skip_ssl_validation = properties.ssl.skip_cert_verify ? '--skip-ssl-validation' : ''
username, password = properties.uaa.scim.users.detect{|u|u.include? 'cloud_controller.admin'}.split('|')[0..1]
%>
retry 240 30s    cf api <%= skip_ssl_validation %> api.<%= properties.system_domain %>
cf auth <%= username.shellescape %> <%= password.shellescape %>

echo "Waiting for SSO Routing service broker..."
retry 240 30s    curl --fail --silent --insecure https://<%= p("hcf_sso.host") %>.$HCP_SERVICE_DOMAIN_SUFFIX:<%= p("hcf_sso.port") %>/ping >/dev/null 2>&1

echo "Registering SSO Routing service broker..."

# Check if the broker is known already or not. Depending on the
# result simply update the existing broker, or create a new one.
action=create
if cf service-brokers 2>/dev/null | grep --quiet sso-routing ; then
    action=update
fi
cf ${action}-service-broker sso-routing \
    <%= p("hcf_sso.username") %> \
    <%= p("hcf_sso.password") %> \
    https://<%= p("hcf_sso.host") %>:<%= p("hcf_sso.port") %>

# Make the broker available to all orgs and their spaces
cf enable-service-access sso-routing

echo "Registration of SSO Routing complete."
