#!/usr/bin/env bash

set -o errexit -o nounset

DIRECTORY_BLACKLIST="*-buildpack cflinuxfs2 opensuse42 busybox golang*"

GIT_ROOT=${GIT_ROOT:-$(git rev-parse --show-toplevel)}

BASEDIR="$FISSILE_WORK_DIR/compilation"

OUTPUTDIR="$GIT_ROOT/source-output"
SRC_DIR="$GIT_ROOT/src/"
pushd $SRC_DIR > /dev/null
SRC_FILES=$(find * -type f -name *.yml)
popd > /dev/null

TEMPLATE_FILE=$(cat <<EOF
#
# spec file for package ==PACKAGE_NAME==
#
# Copyright (c) 2017 SUSE LINUX Products GmbH, Nuernberg, Germany.
#
# All modifications and additions to the file contributed by third parties
# remain the property of their copyright owners, unless otherwise agreed
# upon. The license for this file, and modifications and additions to the
# file, is the same license as for the pristine package itself \(unless the
# license for the pristine package is not an Open Source License, in which
# case the license is the MIT License\). An "Open Source License" is a
# license that conforms to the Open Source Definition \(Version 1.9\)
# published by the Open Source Initiative.

# Please submit bugfixes or comments via http://bugs.opensuse.org/
#

Name:           ==PACKAGE_NAME==
Version:        ==PACKAGE_VERSION==
Release:        CAP
License:
Summary:
Url:
Group:
Source:
Patch:
BuildRequires:
PreReq:
Provides:
BuildRoot:      %{_tmppath}/%{name}-%{version}-build

%description

EOF
)

rm -rf $OUTPUTDIR
mkdir -p $OUTPUTDIR

pushd $BASEDIR > /dev/null
DIRS=`ls`
for DIR in $DIRS 
do
  DO_TAR=true
  SOURCE_PATH="$DIR/sources/var/vcap/source"
  SOURCE_NAME=`ls "$SOURCE_PATH"`
  SOURCE_SIZE=`du "$SOURCE_PATH"|tail -n1`
  for ITEM in $DIRECTORY_BLACKLIST
  do
    if [[ $SOURCE_NAME == $ITEM ]]; then
      DO_TAR=false
      echo "-----> $SOURCE_NAME IS BLACKLISTED (matches: $ITEM)"
    fi
  done

  if [[ $DO_TAR == true ]]; then

    # get first folder name for distinguish files later
    pushd $GIT_ROOT/src > /dev/null
    for FILE in $SRC_FILES; do
      STAGE=$(grep -m1 -H $DIR $FILE 2>/dev/null|sed -e 's/\/.*$//g' -) 
      if [ ! -z "$STAGE" ]; then
        echo $STAGE
        break
      fi
    done
    popd > /dev/null
    if [ -z "$STAGE" ]; then
      echo "############################### Failed to find package $DIR in $SRC_DIR"
      exit 1
    fi

    echo "Creating tar archive for $SOURCE_NAME (stage: ${STAGE} source size: $SOURCE_SIZE)"
    PACKAGE_FILE_NAME_BASE="$OUTPUTDIR/${STAGE}_${SOURCE_NAME}" 
    tar czf "${PACKAGE_FILE_NAME_BASE}.tar.gz" "$SOURCE_PATH"
    echo "$TEMPLATE_FILE" >> "scf_${PACKAGE_FILE_NAME_BASE}.spec"
    sed -i -- "s/==PACKAGE_NAME==/$STAGE ${SOURCE_NAME}/g" "${PACKAGE_FILE_NAME_BASE}.spec"
    sed -i -- "s/==PACKAGE_VERSION==/$DIR/g" "${PACKAGE_FILE_NAME_BASE}.spec"
    fi
done

popd > /dev/null
