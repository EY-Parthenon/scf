# # ##
## Objects specified in this file
#
# 1. ServiceAccount     "suse.cap.test-brain.account"
# 2. Role               "suse:cap:test-brain:base-role"
# 3. Role               "suse:cap:test-brain:nfs-role"
# 4. RoleBinding        "suse:cap:test-brain:bind:base-role"  -- 2 <~> 1
# 5. RoleBinding        "suse:cap:test-brain:bind:nfs-role"   -- 3 <~> 1
# 6. PodSecurityPolicy  "suse.cap.test-brain.psp"
# 7. ClusterRole        "suse:cap:test-brain:psp"             -- ^6
# 8. ClusterRoleBinding "suse:cap:test-brain:psp:clusterrole" -- 7 <~> 1
#
## Usage:
#
# Edit `output/kube/bosh-task/acceptance-tests-brain.yaml`.
#
# Replace the name (`default`) in `serviceAccountName: "default"` with
# the name of (1).
#
# Apply this file before starting/applying
# `acceptance-tests-brain.yaml`.
#
## Description
#
# The service account 'suse.cap.test-brain.account' (1) is linked to
# the roles 'suse:cap:test-brain:base-role' (1) and
# 'suse:cap:test-brain:nfs-role' (2) via role bindings (4, 5), for the
# necessary operation permissions.
#
# It is further linked to a pod security policy (6), via a cluster role
# binding (8) and cluster role (7), for more low-level privileges.
#
## Notes
#
# 1. The roles, role bindings, and service account were taken from the
#    SCF helm chart, with renaming.
#
# 2. PSP and associated cluster role (binding) were taken from the
#    cap-psp-rbac of cf-ci/qa-tools, with renaming.
#
##
# # ##
---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  name: "suse.cap.test-brain.account"
---
apiVersion: "rbac.authorization.k8s.io/v1beta1"
kind: "Role"
metadata:
  name: "suse:cap:test-brain:base-role"
rules:
- apiGroups:
  - ""
  resources:
  - "pods"
  verbs:
  - "get"
  - "list"
  - "patch"
- apiGroups:
  - ""
  resources:
  - "services"
  verbs:
  - "get"
- apiGroups:
  - "apps"
  resources:
  - "statefulsets"
  verbs:
  - "get"
---
apiVersion: "rbac.authorization.k8s.io/v1beta1"
kind: "Role"
metadata:
  name: "suse:cap:test-brain:nfs-role"
rules:
- apiGroups:
  - ""
  resources:
  - "services"
  verbs:
  - "create"
  - "get"
  - "delete"
- apiGroups:
  - "apps"
  resources:
  - "statefulsets"
  verbs:
  - "create"
  - "get"
  - "update"
  - "delete"
- apiGroups:
  - ""
  resources:
  - "pods/exec"
  verbs:
  - "create"
  - "delete"
- apiGroups:
  - ""
  resources:
  - "pods/log"
  verbs:
  - "create"
  - "delete"
  - "get"
  - "list"
---
apiVersion: "rbac.authorization.k8s.io/v1beta1"
kind: "RoleBinding"
metadata:
  name: "suse:cap:test-brain:bind:base-role"
subjects:
- kind: "ServiceAccount"
  name: "suse.cap.test-brain.account"
roleRef:
  kind: "Role"
  name: "suse:cap:test-brain:base-role"
  apiGroup: "rbac.authorization.k8s.io"
---
apiVersion: "rbac.authorization.k8s.io/v1beta1"
kind: "RoleBinding"
metadata:
  name: "suse:cap:test-brain:bind:nfs-role"
subjects:
- kind: "ServiceAccount"
  name: "suse.cap.test-brain.account"
roleRef:
  kind: "Role"
  name: "suse:cap:test-brain:nfs-role"
  apiGroup: "rbac.authorization.k8s.io"
---
apiVersion: extensions/v1beta1
kind: PodSecurityPolicy
metadata:
  name: suse.cap.test-brain.psp
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
spec:
  # Privileged
  #privileged: false      	<<< default in suse.caasp.psp.unprivileged
  privileged: true
  # Volumes and File Systems
  volumes:
    # Kubernetes Pseudo Volume Types
    - configMap
    - secret
    - emptyDir
    - downwardAPI
    - projected
    - persistentVolumeClaim
    # Networked Storage
    - nfs
    - rbd
    - cephFS
    - glusterfs
    - fc
    - iscsi
    # Cloud Volumes
    - cinder
    - gcePersistentDisk
    - awsElasticBlockStore
    - azureDisk
    - azureFile
    - vsphereVolume
  allowedFlexVolumes: []
  allowedHostPaths:
    # Note: We don't allow hostPath volumes above, but set this to a path we
    # control anyway as a belt+braces protection. /dev/null may be a better
    # option, but the implications of pointing this towards a device are
    # unclear.
    - pathPrefix: /opt/kubernetes-hostpath-volumes
  readOnlyRootFilesystem: false
  # Users and groups
  runAsUser:
    rule: RunAsAny
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  # Privilege Escalation
  #allowPrivilegeEscalation: false	   <<< default in suse.caasp.psp.unprivileged
  allowPrivilegeEscalation: true
  #defaultAllowPrivilegeEscalation: false  <<< default in suse.caasp.psp.unprivileged
  # Capabilities
  allowedCapabilities: []
  defaultAddCapabilities: []
  requiredDropCapabilities: []
  # Host namespaces
  hostPID: false
  hostIPC: false
  hostNetwork: false
  hostPorts:
  - min: 0
    max: 65535
  # SELinux
  seLinux:
    # SELinux is unsed in CaaSP
    rule: 'RunAsAny'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: suse:cap:test-brain:psp
rules:
  - apiGroups: ['extensions']
    resources: ['podsecuritypolicies']
    verbs: ['use']
    resourceNames: ['suse.cap.test-brain.psp']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: suse:cap:test-brain:psp:clusterrole
roleRef:
  kind: ClusterRole
  name: suse:cap:test-brain:psp
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: suse.cap.test-brain.account
  namespace: scf
